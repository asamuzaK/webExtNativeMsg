export const values: Map<any, any>;
export function abortSetup(msg: string): void;
export function handleSetupCallback(): Function | null;
export function handleRegClose(code: number): Function | null;
export function handleRegStderr(data: any): void;
export function getBrowserData(key: string): object;
export function getConfigDir(opt?: object): string;
export class Setup {
    constructor(opt?: {
        browser?: string;
        configPath?: string;
        hostDescription?: string;
        hostName?: string;
        mainScriptFile?: string;
        chromeExtensionIds?: Array<string>;
        webExtensionIds?: Array<string>;
        supportedBrowsers?: Array<string>;
        callback?: Function;
        overwriteConfig?: boolean;
    });
    set browser(arg: any);
    get browser(): any;
    set supportedBrowsers(arg: string[]);
    get supportedBrowsers(): string[];
    set configPath(arg: string);
    get configPath(): string;
    set hostDescription(arg: string);
    get hostDescription(): string;
    set hostName(arg: string);
    get hostName(): string;
    set mainScriptFile(arg: string);
    get mainScriptFile(): string;
    set chromeExtensionIds(arg: string[]);
    get chromeExtensionIds(): string[];
    set webExtensionIds(arg: string[]);
    get webExtensionIds(): string[];
    set callback(arg: Function);
    get callback(): Function;
    set overwriteConfig(arg: boolean);
    get overwriteConfig(): boolean;
    _getBrowserConfigDir(): string | null;
    _createReg(manifestPath: string): Promise<object>;
    _createManifest(shellPath: string, configDir: string): Promise<string>;
    _createShellScript(configDir: string): Promise<string>;
    _createConfigDir(): Promise<string>;
    _createFiles(): Promise<any>;
    _handleBrowserConfigDir(): Promise<any>;
    _handleBrowserInput(arr: string): Promise<any>;
    run(): Promise<any>;
    #private;
}
